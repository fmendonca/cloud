---
  - hosts: localhost
    connection: local
    collections:
    - azure.azcollection

    tasks:

      - name: Create a resource group
        azure_rm_resourcegroup:
          name: "rg-{{ deploy_name }}"
          location: "{{ az_region }}"
          state: present
        register: aro_rg_response

      - name: Create a virtual network
        azure_rm_virtualnetwork:
          resource_group: "rg-{{ deploy_name }}"
          name: "vnet-{{ deploy_name }}"
          address_prefixes:
              - "{{ cidr_vnet }}"
          state: present

      - name: Create a ARO subnets Masters
        azure_rm_subnet:
          resource_group: "rg-{{ deploy_name }}"
          virtual_network_name: "vnet-{{ deploy_name }}"
          name: "{{ deploy_name }}-master"
          address_prefix_cidr: "{{ cidr_subnet_master }}"
          private_link_service_network_policies: Disabled
          service_endpoints:
          - service: Microsoft.ContainerRegistry
        register: aro_master_subnet_response

      - name: Create a ARO subnets Workers
        azure_rm_subnet:
          resource_group: "rg-{{ deploy_name }}"
          virtual_network_name: "vnet-{{ deploy_name }}"
          name: "{{ deploy_name }}-worker"
          address_prefix_cidr: "{{ cidr_subnet_worker }}"
        register: aro_worker_subnet_response

      - name: Set ARO Cluster Properties
        set_fact:
          openshift_pull_secret: "{{ openshift_pull_secret_key }}"
          resource_group_id: "{{ aro_rg_response.state.id }}"
          master_subnet_id: "{{ aro_master_subnet_response.state.id }}"
          worker_subnet_id: "{{ aro_worker_subnet_response.state.id }}"

      - name: get subscription
        azure.azcollection.azure_rm_subscription_info:
          all: True
        register: _subscription

      - set_fact:
          azr_subscription_id: "{{ _subscription.subscriptions[0].subscription_id }}"
        when: azr_subscription_id == ""
      - set_fact:
          azr_tenant_id: "{{ _subscription.subscriptions[0].tenant_id }}"
        when: azr_tenant_id == ""


      - set_fact:
          app_display_name: "http://ansible-aro-{{ azr_resource_group }}-{{ azr_aro_cluster }}"

      - name: check for existing ad app
        azure.azcollection.azure_rm_adapplication_info:
          tenant: "{{ azr_tenant_id }}"
        register: _ad_applications
        no_log: true

      - fail:
          msg: "An AD application with display name '{{ app_display_name }}' already exists"
        when:
          - _ad_applications | json_query(jmesquery) != []
        vars:
          jmesquery: "applications[?app_display_name == `{{ app_display_name }}`]"

      # Create AD application
      - name: Create ad application
        azure.azcollection.azure_rm_adapplication:
          tenant: "{{ azr_tenant_id }}"
          display_name: "{{ app_display_name }}"
        register: _ad_application

      - set_fact:
          azr_service_principal_application_id: "{{ _ad_application.app_id }}"
          app_oid: "{{ _ad_application.object_id }}"

      - name: create ad sp
        azure.azcollection.azure_rm_adserviceprincipal:
          app_id: "{{ azr_service_principal_application_id }}"
          state: present
          tenant: "{{ azr_tenant_id }}"
        register: _ad_sp

      - name: wait a minute for AD sync new SP
        pause:
          minutes: 1

      - set_fact:
          sp_oid: "{{ _ad_sp.object_id }}"

      - name: create ad password
        azure.azcollection.azure_rm_adpassword:
          app_id: "{{ azr_service_principal_application_id }}"
          value: "{{ azr_service_principal_application_secret }}"
          tenant: "{{ azr_tenant_id }}"


      - name: Obtain ARO Resource Group Role Definition Scope
        azure.azcollection.azure_rm_roledefinition_info:
          scope: "/subscriptions/{{ azr_subscription_id }}"
        register: sub_roledef_scope_output
        no_log: true

      - name: Obtain Object ID of Contributor Role Definition
        set_fact:
          fact: "{{ sub_roledef_scope_output | json_query(jmesquery) }}"
        register: oid_sub_scope_query
        vars:
          jmesquery: "roledefinitions[?role_name == 'Contributor'].[id]"
        no_log: true

      - name: Setting Object ID scope variable for the ARO Resource Group
        set_fact:
          sub_oid: "{{ oid_sub_scope_query.ansible_facts.fact[0][0] }}"

      - name: Give ARO Subscription Contributor Role to the Service Principal
        azure.azcollection.azure_rm_roleassignment:
          scope: "/subscriptions/{{ azr_subscription_id }}"
          assignee_object_id: "{{ sp_oid }}"
          role_definition_id: "{{ sub_oid }}"
          tenant: "{{ azr_tenant_id }}"
          subscription_id: "{{ azr_subscription_id }}"
        retries: 10
        delay: 60


      - name: Obtain ARO Resource Group Role Definition Scope
        azure.azcollection.azure_rm_roledefinition_info:
          scope: "/subscriptions/{{ azr_subscription_id }}/resourceGroups/{{ azr_resource_group }}"
        register: rg_roledef_scope_output
        no_log: true

      - name: Obtain Object ID of Contributor Role Definition
        set_fact:
          fact: "{{ rg_roledef_scope_output | json_query(jmesquery) }}"
        register: oid_rg_scope_query
        vars:
          jmesquery: "roledefinitions[?role_name == 'Network Contributor'].[id]"
        no_log: true

      - name: Setting Object ID scope variable for the ARO Resource Group
        set_fact:
          rg_oid: "{{ oid_rg_scope_query.ansible_facts.fact[0][0] }}"

      - name: get ad sp info
        azure_rm_adserviceprincipal_info:
          display_name: "Azure Red Hat OpenShift RP"
          tenant: "{{ azr_tenant_id }}"
        register: _aro_rp_info

      - set_fact:
          azr_aro_provider_id: "{{ _aro_rp_info.service_principals[0].object_id }}"


      - name: Granting the ARO Resource Provider Contributor access to the ARO virtual network
        azure.azcollection.azure_rm_roleassignment:
          scope: "/subscriptions/{{ azr_subscription_id }}/resourceGroups/{{ azr_resource_group }}/providers/Microsoft.Network/virtualNetworks/{{ azr_virtual_network.name }}"
          assignee_object_id: "{{ azr_aro_provider_id }}"
          role_definition_id: "{{ rg_oid }}"

      - name: Create ARO Cluster
        azure_rm_openshiftmanagedcluster:
          resource_group: "rg-{{ deploy_name }}"
          name: "{{ deploy_name }}"
          location: "{{ az_region }}"
          cluster_profile:
            pull_secret: "{{ openshift_pull_secret }}"
            cluster_resource_group_id: "{{ resource_group_id }}"
          service_principal_profile:
            client_id: "{{ sp_clientid }}"
            client_secret: "{{ sp_clientsecret }}"
          network_profile:
            pod_cidr: "10.128.0.0/14"
            service_cidr: "172.30.0.0/16"
          master_profile: 
            subnet_id: "{{  master_subnet_id }}"
            vm_size: "Standard_D4s_v3"
          worker_profiles: 
          - name: "worker"
            subnet_id: "{{  worker_subnet_id }}"
            disk_size: 128
            vm_size: "Standard_D8s_v3"
            count: 3
          api_server_profile:
            visibility: Public
          ingress_profiles:
          - name: default
            visibility: Public
        register: aro_create_response